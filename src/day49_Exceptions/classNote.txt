08/26/2021
Topics: Exceptions & Exception handlings

Package name: day49_Exceptions


Exception:
	1. checked & unchecked exceptions
	2. try & catch blocks
	3. finally block
	4. throws keyword
	5. throw keyword
	6. custom exception



Exception: unexpected or unwanted events

		unchecked exception (unexpected event): occures during the runtime

					RuntimeException class is the parent of all the unchecked exception

					All the runtime exceptions are unchecked exception


		checked exception (unwanted event): occures during the compile time

					All the exceptions that are not runtime execptions are checked exception


Exception Handlings:

		1. try & catch blocks: used for handling both chekced and unchecked exceptions

				try{
					exception code
				}catch(ExceptionClass e){
					statements
				}

				multi-catch block: parent exception type CAN NOT be placed before child exception type


				finally block: always gets executed regardless of the exception


		2. throws keyword: used for handling checked exceptions ONLY


						caller of the method will be responsible for handling the exception



throw keyword: manually throw an exception

		throw ObjectOfException



come back at 2:15pm

Inheritance short quiz due by 2:40pm


Custom exceptions:
	1. how to create custom unchecked exception?
			by inheriting RuntimeException class


	2. how to create custom checked exception?
			by inheriting Exception class

 if you have unchecked exception, you need to use "try & catch" for solution.
         * if you have checked exception and if you are going to use this class somewhere and if you need a permanent solution
           then you need to use "try & catch".
         * if you have checked exception, and you are not going to use this class anywhere else, you can use "throws" keyword.
         * if you need to create an exception not fixing an exception, you need to use "throw" keyword.






